#!/bin/bash
# ----------------------------------
source $(dirname $0)/../inc/includes_before
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
# Server list:		https://letsencrypt.status.io/
# For test:			Add '--test-cert'
# Documentation:		https://certbot.eff.org/docs/intro.html
######################################################################

#### VARs
sLocSwitch="$1"	# renew ?
sServicesToRestart=""
# Certbot params
sCerbotParams="certonly --authenticator standalone --verbose --update-registration --no-eff-email --agree-tos --rsa-key-size 2048 --email ${gsMainUserEmail} -d ${gsHostNameFqdn}"

#### INSTALL
if [ "${sLocSwitch}" != "renew" ]; then
	gfnPackagesManage install 'libaugeas0 augeas-lenses' 'backports'
	gfnPackageBundleInstall 'python-virtualenv python-dev gcc dialog libssl-dev libffi-dev libltdl-dev psutils python-augeas'
fi

#### Function certificate end date next renewal
fnNextRenewal() {
	local dEndDate dRenewDay dRenewMonth sTarGz

	if [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem ]; then
		dEndDate=$(openssl x509 -in /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem -noout -dates | grep 'notAfter' | cut -d "=" -f 2)
		dEndDate=$(date -d "${dEndDate}" +%Y-%m-%d)
		# update DB
		cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_date='${dEndDate}' WHERE id_system='1';" -v
		# Backup certificates
		sTarGz="${MySB_InstallDir}_backup/${gsHostNameFqdn}_${dEndDate}_letsencrypt.tar.gz"
		mkdir -p ${MySB_InstallDir}_backup
		if [ ! -f ${sTarGz} ]; then
			tar zcvf ${sTarGz} /etc/letsencrypt/
		fi
	fi
}

#### Function for firewalling
fnFirewalling() {
	local sServerList sServer sIpList IPv4

	case "$1" in
		'before')
			cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_openport='1' WHERE id_system='1';" -v
			gfnScriptInvoke 'source' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'refresh' '--letsencrypt'
			echo
		;;
		'after')
			cmdMySQL 'MySB_db' "UPDATE system SET letsencrypt_openport='0' WHERE id_system='1';" -v
			gfnScriptInvoke 'ScreenSTD' "${MySB_InstallDir}/bin/MySB_SecurityRules" 'create' 'CRON'
			echo
		;;
	esac
}

#### Function use of certifciates for services
fnUseOfCertificates() {
    local nNumLine

    sServicesToRestart="${sServicesToRestart} nginx"

    if [ [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem ] && [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem ] ]; then
        # NginX
        echo "    ssl_certificate_key /etc/letsencrypt/live/${gsHostNameFqdn}/ssl/privkey.pem;" > /etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf
        echo "    ssl_certificate /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem;" > /etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf
        echo "    include snippets/letsencrypt_${gsHostNameFqdn}.conf;" > /etc/nginx/ssl_certificate

        # Webmin
        if [ -f /etc/webmin/miniserv.pem ]; then
            if [ -f ${MySB_InstallDir}/ssl/fullchain.pem ]; then
                cat ${MySB_InstallDir}/ssl/privkey.pem > /etc/webmin/miniserv.pem
                cat ${MySB_InstallDir}/ssl/fullchain.pem >> /etc/webmin/miniserv.pem
            fi
            sServicesToRestart="${sServicesToRestart} webmin"
        fi

        # VSFTPd
        nNumLine=$(cat /etc/vsftpd.conf | grep 'rsa_cert_file' -n -m 1 | cut -d ':' -f 1)
        sed -i '/rsa_cert_file/d' /etc/vsftpd.conf
        sed -i ""${nNumLine}"i\/etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem" /etc/vsftpd.conf
        nNumLine=$(cat /etc/vsftpd.conf | grep 'rsa_private_key_file' -n -m 1 | cut -d ':' -f 1)
        sed -i '/rsa_private_key_file/d' /etc/vsftpd.conf
        sed -i ""${nNumLine}"i\/etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" /etc/vsftpd.conf

        # Tautulli
        gfnGetRepoValues 'Tautulli'
        if [[ ! -f ${gsRepoDir}/config.ini ]]; then
            nNumLine=$(cat ${gsRepoDir}/config.ini | grep 'https_cert' -n -m 1 | cut -d ':' -f 1)
            sed -i '/https_cert/d' ${gsRepoDir}/config.ini
            sed -i '/https_key/d' ${gsRepoDir}/config.ini
            sed -i '/https_cert_chain/d' ${gsRepoDir}/config.ini
            sed -i ""$nNumLine"i\https_cert = /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem" ${gsRepoDir}/config.ini
            sed -i ""$nNumLine"i\https_cert_chain = /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem" ${gsRepoDir}/config.ini
            sed -i ""$nNumLine"i\https_key = /etc/letsencrypt/live/${gsHostNameFqdn}/privkey.pem" ${gsRepoDir}/config.ini
            sServicesToRestart="${sServicesToRestart} tautulli"
        fi
        fi
    else
        rm -vf /etc/nginx/snippets/letsencrypt_${gsHostNameFqdn}.conf
    fi
}

#### Generate
if [ ! -f /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem ]; then # Is it a new certificate ?
	# Update certificates for python
	update-ca-certificates --fresh &> /dev/null

	# Firewall
	fnFirewalling 'before'

	# Dev mode ?
	[[ ${gbDevMode} -eq 1 ]] && sCerbotParams="${sCerbotParams} --test-cert"

	cd ${MySB_Files}/
	chmod +x certbot-auto
	./certbot-auto ${sCerbotParams} --preferred-challenges=http --pre-hook "service nginx stop" --post-hook "service nginx start"

	if [ -f /etc/letsencrypt/live/${gsHostNameFqdn}/fullchain.pem ]; then
		# Certificate end date (-21 days)
		fnNextRenewal
	fi

	cmdMySQL 'MySB_db' "UPDATE services SET to_install='0', is_installed='1' WHERE serv_name='Lets Encrypt';" -v

	# Firewall
	fnFirewalling 'after'
else # Or is it a renew ?
	if [ "${sLocSwitch}" == "renew" ] || [ "${sLocSwitch}" == "UPGRADE" ] || [ "${sLocSwitch}" == "INSTALL" ]; then
		dEndDate=$(cmdMySQL 'MySB_db' "SELECT letsencrypt_date FROM system WHERE id_system='1';")
		if [ "${dEndDate}" == "0000-00-00" ]; then
			fnNextRenewal
			dEndDate=$(cmdMySQL 'MySB_db' "SELECT letsencrypt_date FROM system WHERE id_system='1';")
		fi

		if [ "${sLocSwitch}" == "UPGRADE" ]; then
			bContinue=1
		else
			if [ ${gbDevMode} -eq 0 ]; then
				bContinue=1
			else
				bContinue=0
			fi
		fi

		# Debug
		echo "dEndDate: ${dEndDate}"
		echo "bContinue: $bContinue"
		if [ ! -z "${dEndDate}" ] && [ $bContinue -eq 1 ] ; then
			dEndDate=$(date -d "${dEndDate}" +%Y%m%d)
			dNow=$(date +%Y%m%d)
			tDiff=$(( ($(date --date="${dEndDate}" +%s) - $(date --date="$dNow" +%s) )/(60*60*24) ))

			if [ "${tDiff}" -le "21" ]; then
				# Update certificates for python
				update-ca-certificates --fresh &> /dev/null
				# Firewall
				fnFirewalling 'before'

				cd ${MySB_Files}/
				chmod +x certbot-auto
				./certbot-auto renew --preferred-challenges=http --pre-hook "service nginx stop" --post-hook "service nginx start"
				dNewEndDate=$(openssl x509 -in /etc/letsencrypt/live/${gsHostNameFqdn}/cert.pem -noout -dates | grep 'notAfter'  | cut -d "=" -f 2)
				[[ "${dNewEndDate}" != "${dEndDate}" ]] && fnNextRenewal

				# Firewall
				fnFirewalling 'after'
			else
				echo "tDiff: ${tDiff}"
			fi
		fi
	else
		fnNextRenewal
	fi
fi

#### Clean
[[ -d /opt/eff.org ]] && rm -rf /opt/eff.org

#### Restart services
[[ ! -z "${sServicesToRestart}" ]] && gfnManageServices start "${sServicesToRestart}"

# -----------------------------------------
source $(dirname $0)/../inc/includes_after
# -----------------------------------------
##################### LAST LINE ######################################
